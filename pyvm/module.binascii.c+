#include "dynlib.h"

/* hexlify */

void _hexlify (char * __restrict dest, const char * __restrict source, int len)
{
static	const char transtbl [] = "0123456789abcdef";

	while (len--) {
		*dest++ = transtbl [(*source >> 4) & 0xf];
		*dest++ = transtbl [*source++ & 0xf];
	}
}

_module __object__ *hexlify (REFPTR argv[])
{
	StringObj *S = StringObj.checkedcast (argv [0].o);
	int L = 2 * S->len;
	char *ret = seg_alloc (L + 1);
	_hexlify (ret, S->str, S->len);
	ret [L] = 0;
	return new StringObj allocated (ret, L);
}

/* evalstr */

static int _py_escape (char * __restrict dst, const char * __restrict src, int l)
{
	int i, e;
	char *ss, *st = dst;
static	const int esc [256] = {
		['r'] = '\r', ['n'] = '\n', ['t'] = '\t',
		['a'] = '\a', ['b'] = '\b', ['v'] = '\v', ['f'] = '\f',
		['\\'] = '\\', ['\''] = '\'', ['"'] = '"',
		['0'] = -1, ['1'] = -1, ['2'] = -1, ['3'] = -1, ['4'] = -1,
		['5'] = -1, ['6'] = -1, ['7'] = -1, ['x'] = -2,
		['\n'] = -3,
	};

	for (i = 0; i < l; i++)
		if_likely (src [i] != '\\') *dst++ = src [i];
		else
			if (!(e = esc [(unsigned int) src [++i]])) {
				*dst++ = '\\'; /* python keeps the slash */
				*dst++ = src [i];
			} else if (e > 0) *dst++ = e;
			else if (e == -1) {
				*dst++ = strtol (src + i, &ss, 8);
				i = ss - src - 1;
			} else if (e == -2) {
				*dst++ = strtol (src + i + 1, &ss, 16);
				i = ss - src - 1;
			} else ;

	*dst++ = 0;
	return dst - st;
}

__object__ *py_escape (const char *s, int l)
{
	char * buf = seg_alloc (1 + l);
	int L = _py_escape (buf, s, l);
	if (L != l)
		buf = seg_realloc (buf, L);
	return new StringObj allocated (buf, L - 1);
}

_module __object__ *evalstr (REFPTR argv [], int argc)
{
	StringObj *S = argv [0].check_string ();
	return py_escape (S->str, S->len);
}

/* module */

static bltinfunc funcs [] = {
	{ "hexlify", SETARGC (1, 1), hexlify, 0 },
	{ "evalstr", SETARGC (1, 1), evalstr, 0 },
	BSENTINEL
};

static const char *aliases [] = { "b2a_hex", "hexlify", 0 };

slowcold __object__ *import_binascii ()
{
	return new ModuleObj BltinModule ("binascii", funcs, aliases);
}
